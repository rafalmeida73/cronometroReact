{"version":3,"sources":["assets/cronometro.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","numero","botao","timer","start","bind","limpar","this","clearInterval","setInterval","setState","className","src","require","alt","toFixed","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,wC,mHC8D5BC,G,wDAzDd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACZC,OAAQ,EACRC,MAAO,SAER,EAAKC,MAAQ,KACb,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBARG,E,oDAYV,IAAD,OAEFL,EAAQO,KAAKP,MAEC,OAAfO,KAAKJ,OACPK,cAAcD,KAAKJ,OACnBI,KAAKJ,MAAQ,KACbH,EAAME,MAAQ,UAEdK,KAAKJ,MAAQM,aAAY,WACxB,IAAIT,EAAQ,EAAKA,MACjBA,EAAMC,QAAU,GAChB,EAAKS,SAASV,KACX,KACFA,EAAME,MAAQ,QAGjBK,KAAKG,SAASV,K,+BAII,OAAfO,KAAKJ,QACPK,cAAcD,KAAKJ,OACnBI,KAAKJ,MAAQ,MAEd,IAAIH,EAAQO,KAAKP,MACjBA,EAAMC,OAAS,EACfD,EAAME,MAAQ,QACdK,KAAKG,SAASV,K,+BAId,OACC,yBAAKW,UAAU,aACd,yBAAKC,IAAKC,EAAQ,IAA4BC,IAAI,sBAClD,2BAAIP,KAAKP,MAAMC,OAAOc,QAAQ,IAC9B,yBAAKJ,UAAU,WACd,uBAAGK,QAAST,KAAKH,OAAQG,KAAKP,MAAME,OACpC,uBAAGc,QAAST,KAAKD,QAAjB,gB,GApDaW,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.381de971.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cronometro.54825791.png\";","import React, {Component} from 'react';\r\nimport './style.css';\r\n\r\nclass App extends Component{\r\n\r\n constructor(props){\r\n  super(props);\r\n  this.state = {\r\n   numero: 0,\r\n   botao: 'Start'\r\n  };\r\n  this.timer = null;\r\n  this.start = this.start.bind(this);\r\n  this.limpar = this.limpar.bind(this);\r\n }\r\n\r\n\r\n start(){\r\n\r\n  let state = this.state;\r\n\r\n  if(this.timer !== null){\r\n   clearInterval(this.timer);\r\n   this.timer = null;\r\n   state.botao = \"Start\";\r\n  } else{\r\n   this.timer = setInterval(()=>{\r\n    let state = this.state;\r\n    state.numero += 0.1;\r\n    this.setState(state);\r\n     },100)\r\n     state.botao = \"Stop\";\r\n  }\r\n\r\n  this.setState(state);\r\n }\r\n\r\n limpar(){\r\n  if(this.timer !== null){\r\n   clearInterval(this.timer);\r\n   this.timer = null;\r\n  }\r\n  let state = this.state;\r\n  state.numero = 0;\r\n  state.botao = \"Start\";\r\n  this.setState(state);\r\n }\r\n\r\n render(){\r\n  return(\r\n   <div className=\"container\">\r\n    <img src={require('./assets/cronometro.png')} alt=\"Imagem cronometro\"/>\r\n    <a>{this.state.numero.toFixed(2)}</a>\r\n    <div className=\"areaBtn\">\r\n     <a onClick={this.start}>{this.state.botao}</a>\r\n     <a onClick={this.limpar}>Limpar</a>\r\n    </div>\r\n   </div>\r\n  )\r\n }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}